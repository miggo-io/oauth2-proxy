name: Publish Release
run-name: Release ${{ github.event.inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Tag release
        id: tag
        run: |
          # Set up github-actions[bot] user
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # Use version from input
          version="${{ github.event.inputs.version }}"
          echo "Tagging release $version"

          # Create annotated tag
          git tag -a "$version" -m "Release $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Get dependencies
        env:
          GOLANGCI_LINT_VERSION: v1.64.8
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${GOLANGCI_LINT_VERSION}
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          go mod download

      - name: Build Artifacts
        run: make release

      - name: Upload Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: oauth2-proxy-artifacts
          path: |
            release/*.tar.gz
            release/*.txt

      - name: Push tag
        run: git push origin "${{ steps.tag.outputs.version }}"

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${{ steps.tag.outputs.version }}
          numericVersion="${version#v}"
          notes=$(sed -n "/^# ${numericVersion}$/,/^# /{ /# ${numericVersion}$/d; /# /!p }" CHANGELOG.md)
          gh release create "$version" \
            --title "$version" \
            --notes "$notes" \
            --prerelease \
            && gh release upload "$version" release/*.tar.gz release/*.txt

  docker:
    needs: publish
    runs-on: ubuntu-latest
    environment: "production"
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.publish.outputs.tag }}
          fetch-depth: 0
          fetch-tags: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ECR_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build images
        run: make build-docker-all
        env:
          REGISTRY: ${{ vars.ECR_REGISTRY }}

      - name: Push images
        run: make push-docker-all
        env:
          REGISTRY: ${{ vars.ECR_REGISTRY }}
